import asyncio
import random
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram import Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery


from projectnum1.db import save_to_db, save_rating


user_router = Router()


class DosugStates(StatesGroup):
    mood = State()
    free_time = State()
    people = State()


@user_router.message(Command("start_dosug"))
async def start_dosug(message: Message, state: FSMContext):
    mood_kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–í–µ—Å–µ–ª–æe")],
        [KeyboardButton(text="–ì—Ä—É—Å—Ç–Ω–æe")],
        [KeyboardButton(text="–°–ø–æ–∫–æ–π–Ω–æe")]
    ], resize_keyboard=True, one_time_keyboard=True)

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —É —Ç–µ–±—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?", reply_markup=mood_kb)
    await state.set_state(DosugStates.mood)


@user_router.message(DosugStates.mood)
async def get_mood(message: Message, state: FSMContext):
    await state.update_data(mood=message.text.lower())
    await message.answer("–°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–≤ —á–∞—Å–∞—Ö)?", reply_markup=ReplyKeyboardRemove())
    await state.set_state(DosugStates.free_time)


@user_router.message(DosugStates.free_time)
async def get_time(message: Message, state: FSMContext):
    try:
        hours = float(message.text.replace(',', '.'))
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.5 –∏–ª–∏ 2).")
        return

    await state.update_data(free_time=hours)
    await message.answer("–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –¥–æ—Å—É–≥–µ?")
    await state.set_state(DosugStates.people)


@user_router.message(DosugStates.people)
async def get_people(message: Message, state: FSMContext):
    try:
        people = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    await state.update_data(people=people)
    data = await state.get_data()

    mood = data.get("mood")
    free_time = float(data.get("free_time"))
    user_id = message.from_user.id


    save_to_db(user_id, mood, free_time, people)

    suggestion = suggest_activity(mood, free_time, people)

    await state.update_data(suggestion=suggestion)

    rate_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëç –î–∞", callback_data="rate_yes")],
        [InlineKeyboardButton(text="üëé –ù–µ—Ç", callback_data="rate_no")]
    ])

    await message.answer(f"üß† –í–æ—Ç –∏–¥–µ—è –¥–ª—è –¥–æ—Å—É–≥–∞:\nüëâ {suggestion}\n\n –•–æ—á–µ—à—å –∑–∞–Ω–µ—Å—Ç–∏ –∏–¥–µ—é –≤ —Ç–∞–±–ª–∏—Ü—É –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ?", reply_markup=rate_kb)



def suggest_activity(mood, time, people):
    mood = mood.lower()
    suggestions = []

    if "–≥—Ä—É—Å—Ç" in mood:
        if people == 1:
            if time < 1:
                suggestions = [
                    "üéß –ü–æ—Å–ª—É—à–∞–π —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â—É—é –º—É–∑—ã–∫—É",
                    "üßò –°–¥–µ–ª–∞–π –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—É—é –≥–∏–º–Ω–∞—Å—Ç–∏–∫—É",
                    "üì± –ü–æ—Å–º–æ—Ç—Ä–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ"
                ]
            elif time < 2:
                suggestions = [
                    "üé¨ –ü–æ—Å–º–æ—Ç—Ä–∏ –¥–æ–±—Ä—ã–π —Ñ–∏–ª—å–º",
                    "üö∂‚Äç‚ôÇÔ∏è –°—Ö–æ–¥–∏ –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É",
                    "üé® –ù–∞—Ä–∏—Å—É–π —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏"
                ]
            else:
                suggestions = [
                    "üõÅ –£—Å—Ç—Ä–æ–π —Å–µ–±–µ SPA-–¥–µ–Ω—å",
                    "üìì –ó–∞–ø–∏—à–∏ –º—ã—Å–ª–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫",
                    "üé• –ü–æ—Å–º–æ—Ç—Ä–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Ñ–∏–ª—å–º"
                ]
        else:
            suggestions = [
                "üß© –ù–∞—Å—Ç–æ–ª–∫–∏ —Å –¥—Ä—É–∑—å—è–º–∏ –∏ —á–∞–π ‚Äî —É—é—Ç–Ω–æ –∏ –≤–µ—Å–µ–ª–æ",
                "üéû –°–æ–≤–º–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–µ–¥–∏–∏",
                "üêä –ò–≥—Ä–∞ –≤ '–ö—Ä–æ–∫–æ–¥–∏–ª–∞' ‚Äî –∑–∞—Ä—è–¥–∏—Ç —ç–Ω–µ—Ä–≥–∏–µ–π"
            ]

    elif "–≤–µ—Å–µ–ª" in mood:
        if people == 1:
            suggestions = [
                "üíÉ –ü–æ—Ç–∞–Ω—Ü—É–π –ø–æ–¥ –ª—é–±–∏–º—É—é –º—É–∑—ã–∫—É",
                "ü§£ –ü–æ—Å–º–æ—Ç—Ä–∏ —Å—Ç–µ–Ω–¥–∞–ø –∏–ª–∏ –º–µ–º—ã",
                "üéÆ –ü–æ–∏–≥—Ä–∞–π –≤ –≤–µ—Å—ë–ª—É—é –∏–≥—Ä—É"
            ]
        else:
            if time >= 2:
                suggestions = [
                    "üé≥ –°—Ö–æ–¥–∏—Ç–µ –≤ –±–æ—É–ª–∏–Ω–≥ –∏–ª–∏ –≤ –ø–∞—Ä–∫",
                    "üß∫ –£—Å—Ç—Ä–æ–π—Ç–µ –ø–∏–∫–Ω–∏–∫",
                    "üìπ –°–Ω–∏–º–∏—Ç–µ –≤–µ—Å—ë–ª–æ–µ –≤–∏–¥–µ–æ –≤–º–µ—Å—Ç–µ"
                ]
            else:
                suggestions = [
                    "üé≤ –ò–≥—Ä–∞ –≤ 'Uno' –∏–ª–∏ '–ö—Ä–æ–∫–æ–¥–∏–ª–∞'",
                    "üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è —É–≥–∞–¥–∞–π–∫–∞",
                    "üé§ –ö–∞—Ä–∞–æ–∫–µ-–¥–æ–º–∞—à–∫–∞"
                ]

    elif "—Å–ø–æ–∫–æ–π–Ω" in mood:
        if people == 1:
            suggestions = [
                "üìö –ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ —Å —á–∞–µ–º",
                "üéß –ú–µ–¥–∏—Ç–∞—Ü–∏—è –∏ –º—É–∑—ã–∫–∞",
                "üå≥ –ü—Ä–æ–≥—É–ª–∫–∞ –≤ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ"
            ]
        else:
            suggestions = [
                "üé¨ –°–æ–≤–º–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å–º–∞",
                "‚ôü –ò–≥—Ä–∞ –≤ —à–∞—Ö–º–∞—Ç—ã –∏–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
                "‚òïÔ∏è –û–±—Å—É–∂–¥–µ–Ω–∏–µ –∫–Ω–∏–≥ –∏–ª–∏ –∂–∏–∑–Ω–∏ –∑–∞ —á–∞–µ–º"
            ]
    else:
        suggestions = [
            "üöÄ –ü–æ–ø—Ä–æ–±—É–π —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ ‚Äî –º–æ–∂–µ—Ç —ç—Ç–æ –±—É–¥–µ—Ç —Ç–≤–æ—ë!",
            "üîÅ –°–¥–µ–ª–∞–π –ø–µ—Ä–µ—Ä—ã–≤ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Å—å",
            "üéØ –î–µ–ª–∞–π —Ç–æ, —á—Ç–æ –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ç–µ–±–µ —Ä–∞–¥–æ—Å—Ç—å"
        ]

    return random.choice(suggestions)

@user_router.callback_query(F.data == "rate_yes")
async def on_rate_yes(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    suggestion = data.get("suggestion")

    rating_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1", callback_data="rating_1"),
         InlineKeyboardButton(text="2", callback_data="rating_2"),
         InlineKeyboardButton(text="3", callback_data="rating_3"),
         InlineKeyboardButton(text="4", callback_data="rating_4"),
         InlineKeyboardButton(text="5", callback_data="rating_5")]
    ])

    await callback.message.edit_text(
        f"üß† –í–æ—Ç –∏–¥–µ—è –¥–ª—è –¥–æ—Å—É–≥–∞:\nüëâ {suggestion}\n\n–û—Ü–µ–Ω–∏ –æ—Ç 1 –¥–æ 5:",
        reply_markup=rating_kb
    )

    await callback.answer()

@user_router.callback_query(F.data.startswith("rating_"))
async def on_rating(callback: CallbackQuery, state: FSMContext):
    rating = int(callback.data.split("_")[1])
    data = await state.get_data()
    suggestion = data.get("suggestion")
    user_id = callback.from_user.id

    save_rating(user_id, suggestion, rating)

    await callback.message.edit_text(f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {rating} ‚≠ê")
    await callback.answer()
    await state.clear()


@user_router.callback_query(F.data == "rate_no")
async def on_rate_no(callback: CallbackQuery):
    await callback.message.edit_text("–ö–∞–∫ –ø–æ–∂–µ–ª–∞–µ—Ç–µ üôå")
    await callback.answer()





